import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Checkbox } from 'primeng/checkbox';
import { MODE } from '../constants';
import { ProvenanceWidgetsService } from '../provenance-widgets.service';
import isEqual from 'lodash.isequal';
import * as i0 from "@angular/core";
import * as i1 from "../provenance-widgets.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular-slider/ngx-slider";
import * as i4 from "primeng/button";
import * as i5 from "@angular/forms";
import * as i6 from "primeng/checkbox";
import * as i7 from "../icon/icon.component";
export class CheckboxComponent extends Checkbox {
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (!this.firstChange && !isEqual(this._selected, value)) {
            this.change(value || []);
        }
        this.firstChange = false;
        this._selected = value;
    }
    get provenance() {
        return this._provenance;
    }
    set provenance(value) {
        if (this._provenance && value?.revalidate) {
            this._provenance = value;
            this.ngOnInit();
            this._visualize();
            return;
        }
        this._provenance = value;
    }
    constructor(mss, el, cd) {
        super(cd);
        this.mss = mss;
        this.el = el;
        this.firstChange = true;
        this.mode = MODE;
        this.visualize = true;
        this.freeze = false;
        this.selectedChange = new EventEmitter();
        this.interval = NaN;
        this.provenanceChange = new EventEmitter();
        mss.init(el, undefined, "checkbox");
        mss.crosshairSelect = (keys) => {
            this.selectedChange.emit(keys);
        };
    }
    ngOnInit() {
        this.mss.options = this.data.length;
        this.mss.mode = this.mode;
        if (this.provenance?.hasUserInteracted || this.provenance?.revalidate) {
            this.mss.setProvenance(this.provenance);
            this.selected = Object
                .entries(this.mss.getProvenance().dataByOption)
                .filter(([_, v]) => {
                const last = v.at(-1);
                return last && last.unselect === undefined && last.select !== undefined;
            })
                .map(([k, _]) => k);
            return;
        }
        if (this.selected) {
            this.mss.addSimultaneousEvents([], this.selected, this.freeze, false);
        }
    }
    ngAfterViewInit() {
        this.mss.setElement(this.el);
        if (this.mss.getProvenance()?.hasUserInteracted)
            this._visualize();
    }
    getId() {
        return this.mss.myId;
    }
    ngOnDestroy() {
        clearInterval(this.interval);
    }
    change(e) {
        this.mss.addSimultaneousEvents(this.selected || [], e, this.freeze, true, new Date(), this.provenanceChange, this._visualize.bind(this));
    }
    _visualize() {
        if (!this.visualize)
            return;
        // TODO: Remove magic numbers
        const width = this.el.nativeElement.offsetWidth - 22 - 8; // checkbox width + margin
        const height = 22;
        this.mss.visualize(this.mode, width, height, "0 0 0 30px");
    }
    getProvenance() {
        return this.mss;
    }
}
CheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxComponent, deps: [{ token: i1.ProvenanceWidgetsService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: CheckboxComponent, selector: "provenance-checkbox", inputs: { mode: "mode", data: "data", selected: "selected", visualize: "visualize", freeze: "freeze", provenance: "provenance" }, outputs: { selectedChange: "selectedChange", provenanceChange: "provenanceChange" }, providers: [ProvenanceWidgetsService], usesInheritance: true, ngImport: i0, template: "<div\n    style=\"display: flex; margin-bottom: 1rem; margin-top: 1rem;\"\n>\n    <button\n        *ngIf=\"visualize\"\n        pButton\n        type=\"button\"\n        class=\"p-button-help p-button-text\"\n        [disabled]=\"!getProvenance().hasUserInteracted\"\n        [style]=\"{'margin-right': '0.5rem', 'height': '22px', 'width': '22px', 'padding': '0px', 'visibility': visualize ? 'visible' : 'hidden'}\"\n        #btn\n        (click)=\"getProvenance().toggleProvenanceMode(btn, true)\"\n    >\n    <provenance-icon \n        [icon]=\"!getProvenance().hasUserInteracted ? 'disabled' : getProvenance().provenanceMode\"\n        [size]=\"20\"\n        style=\"height: 20px;\"\n    ></provenance-icon>\n    </button>\n    <div class=\"custom-slider\" style=\"width: 100%\">\n        <ngx-slider\n            *ngIf=\"getProvenance().provenanceMode === 'temporal'\"\n            [value]=\"getProvenance().temporalFilterRange[0]\"\n            [highValue]=\"getProvenance().temporalFilterRange[1]\"\n            [options]=\"getProvenance().temporalOptions\"\n            (userChangeEnd)=\"getProvenance().setTemporalRange($event)\"\n            style=\"margin-top: 0px\"\n        >\n        </ngx-slider>\n    </div>\n</div>\n<div \n    *ngFor=\"let d of data\" \n    class=\"field-checkbox\"\n    style=\"position: relative;\"\n>\n    <svg\n        [id]=\"getId() + d[value || 'value']\"\n        width=\"0\"\n        height=\"0\"\n        style=\"position: absolute;\"\n    >\n    </svg>\n    <p-checkbox\n        [inputId]=\"d[inputId || 'inputId'] || null\"\n        [name]=\"d[name || 'name'] || null\"\n        [value]=\"d[value || 'value'] || null\"\n        [label]=\"d[label || 'label'] || null\"\n        [disabled]=\"d['disabled'] || false\"\n        [binary]=\"d['binary'] || false\"\n        [tabindex]=\"d['tabindex'] || null\"\n        [style]=\"d['style'] || style || null\"\n        [styleClass]=\"d['styleClass'] || styleClass || null\"\n        [labelStyleClass]=\"d['labelStyleClass'] || labelStyleClass || null\"\n        [checkboxIcon]=\"d['checkboxIcon'] || 'pi pi-check'\"\n        [readonly]=\"d['readonly'] || false\"\n        [required]=\"d['required'] || false\"\n        [trueValue]=\"d['trueValue'] || true\"\n        [falseValue]=\"d['falseValue'] || false\"\n        (ngModelChange)=\"this.getProvenance().interaction = 'user-change'; selectedChange.emit($event)\"\n        [ngModel]=\"selected\"\n        (onBlur)=\"onBlur\"\n        (onClick)=\"onClick\"\n        (onChange)=\"onChange\"\n    >\n    </p-checkbox>\n</div>", styles: ["::ng-deep p-checkbox{z-index:2}\n", "::ng-deep .custom-slider .ngx-slider .ngx-slider-bar{background:lightgray;height:3px}::ng-deep .custom-slider .ngx-slider .ngx-slider-selection{background:var(--blue-500)}::ng-deep .custom-slider .ngx-slider .ngx-slider-pointer{width:8px;height:16px;top:auto;bottom:0;background-color:#333;border-top-left-radius:3px;border-top-right-radius:3px}::ng-deep .custom-slider .ngx-slider .ngx-slider-pointer:after{display:none}::ng-deep .custom-slider:not(.temporal-slider) .ngx-slider .ngx-slider-bubble{top:5px}::ng-deep .custom-slider .ngx-slider .ngx-slider-limit{font-weight:700;color:var(--blue-500)}::ng-deep .custom-slider .ngx-slider .ngx-slider-tick{width:1px;height:10px;margin-left:4px;border-radius:0;background:#ffe4d1;top:-1px}::ng-deep .custom-slider .ngx-slider .ngx-slider-tick.ngx-slider-selected{background:var(--blue-500)}::ng-deep g.axis text{font-size:.7rem}::ng-deep .custom-slider span{margin-top:0!important;padding-top:0!important}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.SliderComponent, selector: "ngx-slider", inputs: ["value", "highValue", "options", "manualRefresh", "triggerFocus"], outputs: ["valueChange", "highValueChange", "userChangeStart", "userChange", "userChangeEnd"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i6.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { kind: "component", type: i7.IconComponent, selector: "provenance-icon", inputs: ["icon", "size"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'provenance-checkbox', providers: [ProvenanceWidgetsService], template: "<div\n    style=\"display: flex; margin-bottom: 1rem; margin-top: 1rem;\"\n>\n    <button\n        *ngIf=\"visualize\"\n        pButton\n        type=\"button\"\n        class=\"p-button-help p-button-text\"\n        [disabled]=\"!getProvenance().hasUserInteracted\"\n        [style]=\"{'margin-right': '0.5rem', 'height': '22px', 'width': '22px', 'padding': '0px', 'visibility': visualize ? 'visible' : 'hidden'}\"\n        #btn\n        (click)=\"getProvenance().toggleProvenanceMode(btn, true)\"\n    >\n    <provenance-icon \n        [icon]=\"!getProvenance().hasUserInteracted ? 'disabled' : getProvenance().provenanceMode\"\n        [size]=\"20\"\n        style=\"height: 20px;\"\n    ></provenance-icon>\n    </button>\n    <div class=\"custom-slider\" style=\"width: 100%\">\n        <ngx-slider\n            *ngIf=\"getProvenance().provenanceMode === 'temporal'\"\n            [value]=\"getProvenance().temporalFilterRange[0]\"\n            [highValue]=\"getProvenance().temporalFilterRange[1]\"\n            [options]=\"getProvenance().temporalOptions\"\n            (userChangeEnd)=\"getProvenance().setTemporalRange($event)\"\n            style=\"margin-top: 0px\"\n        >\n        </ngx-slider>\n    </div>\n</div>\n<div \n    *ngFor=\"let d of data\" \n    class=\"field-checkbox\"\n    style=\"position: relative;\"\n>\n    <svg\n        [id]=\"getId() + d[value || 'value']\"\n        width=\"0\"\n        height=\"0\"\n        style=\"position: absolute;\"\n    >\n    </svg>\n    <p-checkbox\n        [inputId]=\"d[inputId || 'inputId'] || null\"\n        [name]=\"d[name || 'name'] || null\"\n        [value]=\"d[value || 'value'] || null\"\n        [label]=\"d[label || 'label'] || null\"\n        [disabled]=\"d['disabled'] || false\"\n        [binary]=\"d['binary'] || false\"\n        [tabindex]=\"d['tabindex'] || null\"\n        [style]=\"d['style'] || style || null\"\n        [styleClass]=\"d['styleClass'] || styleClass || null\"\n        [labelStyleClass]=\"d['labelStyleClass'] || labelStyleClass || null\"\n        [checkboxIcon]=\"d['checkboxIcon'] || 'pi pi-check'\"\n        [readonly]=\"d['readonly'] || false\"\n        [required]=\"d['required'] || false\"\n        [trueValue]=\"d['trueValue'] || true\"\n        [falseValue]=\"d['falseValue'] || false\"\n        (ngModelChange)=\"this.getProvenance().interaction = 'user-change'; selectedChange.emit($event)\"\n        [ngModel]=\"selected\"\n        (onBlur)=\"onBlur\"\n        (onClick)=\"onClick\"\n        (onChange)=\"onChange\"\n    >\n    </p-checkbox>\n</div>", styles: ["::ng-deep p-checkbox{z-index:2}\n", "::ng-deep .custom-slider .ngx-slider .ngx-slider-bar{background:lightgray;height:3px}::ng-deep .custom-slider .ngx-slider .ngx-slider-selection{background:var(--blue-500)}::ng-deep .custom-slider .ngx-slider .ngx-slider-pointer{width:8px;height:16px;top:auto;bottom:0;background-color:#333;border-top-left-radius:3px;border-top-right-radius:3px}::ng-deep .custom-slider .ngx-slider .ngx-slider-pointer:after{display:none}::ng-deep .custom-slider:not(.temporal-slider) .ngx-slider .ngx-slider-bubble{top:5px}::ng-deep .custom-slider .ngx-slider .ngx-slider-limit{font-weight:700;color:var(--blue-500)}::ng-deep .custom-slider .ngx-slider .ngx-slider-tick{width:1px;height:10px;margin-left:4px;border-radius:0;background:#ffe4d1;top:-1px}::ng-deep .custom-slider .ngx-slider .ngx-slider-tick.ngx-slider-selected{background:var(--blue-500)}::ng-deep g.axis text{font-size:.7rem}::ng-deep .custom-slider span{margin-top:0!important;padding-top:0!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ProvenanceWidgetsService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { mode: [{
                type: Input
            }], data: [{
                type: Input
            }], selected: [{
                type: Input
            }], visualize: [{
                type: Input
            }], freeze: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], provenance: [{
                type: Input
            }], provenanceChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,